package ru.ifmo.utilities;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

public final class FileUtilities {

	/**
	 * <p>
	 * Calculate number of lines in file
	 * </p>
	 */
	public static int getNumOfStringsInFile(File in) throws IOException {// stupid?
		String filename = in.getAbsolutePath();
		InputStream is = new BufferedInputStream(new FileInputStream(filename));
	    try {
	        byte[] c = new byte[1024];
	        int count = 0;
	        int readChars = 0;
	        boolean empty = true;
	        while ((readChars = is.read(c)) != -1) {
	            empty = false;
	            for (int i = 0; i < readChars; ++i) {
	                if (c[i] == '\n') {
	                    ++count;
	                }
	            }
	        }
	        return (count == 0 && !empty) ? 1 : count;
	    } finally {
	        is.close();
	    }
	}

	/**
	 * <p>
	 * Load double vector (File format: 1 line = 1 double)
	 * </p>
	 */
	public static double[] loadDoubleVectorFromFileLines(File resultsFile)
			throws IOException {
		double[] vector = new double[getNumOfStringsInFile(resultsFile)];
		BufferedReader br = new BufferedReader(new FileReader(resultsFile));
		String line = br.readLine();
		int curExample = 0;

		while (line != null) {
			vector[curExample] = Double.parseDouble(line);
			line = br.readLine();
			curExample++;
		}
		br.close();
		return vector;
	}

	/**
	 * <p>
	 * Load boolean vector (File format: 1 line = 1 value (true == 1; false ==
	 * not 1))
	 * </p>
	 */
	public static boolean[] loadBooleanVectorFromFileLines(File resultsFile)
			throws IOException {
		boolean[] vector = new boolean[FileUtilities
				.getNumOfStringsInFile(resultsFile)];
		BufferedReader br = new BufferedReader(new FileReader(resultsFile));
		String line = br.readLine();
		int curExample = 0;

		while (line != null) {
			vector[curExample] = Integer.parseInt(line) == 1;
			line = br.readLine();
			curExample++;
		}
		br.close();
		return vector;
	}

	/**
	 * <p>
	 * Load int vector (File format: 1 line = 1 int)
	 * </p>
	 */
	public static int[] loadIntVectorFromFileLines(File resultsFile)
			throws IOException {
		int[] vector = new int[getNumOfStringsInFile(resultsFile)];
		BufferedReader br = new BufferedReader(new FileReader(resultsFile));
		String line = br.readLine();
		int curExample = 0;

		while (line != null) {
			vector[curExample] = Integer.parseInt(line);
			line = br.readLine();
			curExample++;
		}
		br.close();
		return vector;
	}

	/**
	 * <p>
	 * Load int matrix (matrix[num_of_line][num_of_col])
	 * </p>
	 */
	public static int[][] loadIntMatrix(File in) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(in));
		String line = br.readLine();
		int[][] matrix = new int[getNumOfStringsInFile(in)][StringUtilities
				.stringToIntVector(line).length];
		int curExample = 0;
		while (line != null) {
			matrix[curExample] = StringUtilities.stringToIntVector(line);
			line = br.readLine();
			curExample++;
		}
		br.close();
		return matrix;
	}

	/**
	 * <p>
	 * Load int to str map (File format: str1 int1...)
	 * </p>
	 */
	public static Map<Integer, String> loadIntToStrMap(File in)
			throws IOException {
		Map<Integer, String> map = new HashMap<Integer, String>();
		BufferedReader br = new BufferedReader(new FileReader(in));
		String line;
		while ((line = br.readLine()) != null) {
			StringTokenizer st = new StringTokenizer(line);
			String feature = st.nextToken();
			int id = Integer.parseInt(st.nextToken());
			map.put(id, feature);
		}
		br.close();
		return map;
	}

	/**
	 * <p>
	 * Load List<Double> (File format: 1 line = 1 double)
	 * </p>
	 */
	public static List<Double> loadDoubleListLines(File in) throws IOException {
		List<Double> score = new ArrayList<Double>();
		BufferedReader br = new BufferedReader(new FileReader(in));
		String line;
		while ((line = br.readLine()) != null) {
			score.add(Double.parseDouble(line));
		}
		br.close();
		return score;
	}
	
	/**
	 * <p>
	 * Load int to str map (File format: str1 int1...)
	 * </p>
	 */
	public static Map<String, Double> loadStrtoDoubleMap(File in)
			throws IOException {
		Map<String, Double> map = new HashMap<String, Double>();
		BufferedReader br = new BufferedReader(new FileReader(in));

		String line = br.readLine();
		while (line != null) {
			String[] mapEntry = line.split(" ");
			map.put(mapEntry[0], Double.parseDouble(mapEntry[1]));
			line = br.readLine();
		}
		br.close();
		return map;
	}

}
